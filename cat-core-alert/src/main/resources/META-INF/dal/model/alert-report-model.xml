<?xml version="1.0" encoding="UTF-8"?>
<model model-package="org.unidal.cat.core.alert.model" class-prefix="Alert" enable-sax-parser="true"
   enable-native-builder='true' enable-native-parser="true" enable-merger="true" enable-base-visitor="true">
  <entity name="alert-report" root="true" class-name="AlertReport">
    <entity-ref name="machine" type="map" names="machines" />
  </entity>
  <entity name="machine">
    <attribute name="ip" value-type="String" key="true" />
    <entity-ref name="event" type="map" names="events" />
  </entity>
  <entity name="event">
    <attribute name="type-name" value-type="String" key="true" />
    <entity-ref name="metric" type="list" names="metrics" />
  </entity>
  <entity name="metric" dynamic-attributes="true">
    <attribute name="from-ip" value-type="String" />
    <attribute name="type-name" value-type="String" />
    <attribute name="type-class" value-type="String" />
    <snippet lang="java"><![CDATA[
      public String get(String name) {
         return m_dynamicAttributes.get(name);
      }

      public double getDouble(String property, double defaultValue) {
         try {
            return Double.parseDouble(get(property));
         } catch (Exception e) {
            return defaultValue;
         }
      }
   
      public int getInt(String property, int defaultValue) {
         try {
            return Integer.parseInt(get(property));
         } catch (Exception e) {
            return defaultValue;
         }
      }
   
      public long getLong(String property, long defaultValue) {
         try {
            return Long.parseLong(get(property));
         } catch (Exception e) {
            return defaultValue;
         }
      }
   
      public String getString(String property, String defaultValue) {
         try {
            return get(property);
         } catch (Exception e) {
            return defaultValue;
         }
      }

      public org.unidal.cat.core.alert.metric.Metrics getMetrics() {
         if (m_typeClass == null) {
            throw new IllegalStateException("No type class found!");
         }
   
         try {
            Class<?> clazz = Class.forName(m_typeClass);
            java.lang.reflect.Constructor<?> c = clazz.getDeclaredConstructor(AlertMetric.class);
   
            c.setAccessible(true);
            return (org.unidal.cat.core.alert.metric.Metrics) c.newInstance(this);
         } catch (Throwable e) {
            throw new IllegalStateException("Error when instantiating class: " + m_typeClass, e);
         }
      }

      public AlertMetric set(String name, Object value) {
         if (value != null) {
            m_dynamicAttributes.put(name, String.valueOf(value));
         } else {
            m_dynamicAttributes.remove(name);
         }
         
         return this;
      }
    ]]></snippet>
  </entity>
</model>

